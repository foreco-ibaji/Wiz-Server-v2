plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.sesacthon'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jar {
    enabled = false
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2022.0.2")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // == 스프링 부트 3.0이상에서 mysql 의존 라이브러리 ==
    implementation 'mysql:mysql-connector-java:8.0.32'

    // == 스프링 부트 3.0 이상일 때, querydsl 의존성 ==
    implementation("com.querydsl:querydsl-jpa:${dependencyManagement.importedProperties["querydsl.version"]}:jakarta")
    annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties["querydsl.version"]}:jakarta")
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")

    // aws parameter store
    implementation 'org.springframework.cloud:spring-cloud-starter-aws-parameter-store-config:2.2.6.RELEASE'

    //aws S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.1.RELEASE'
    implementation 'com.amazonaws:aws-java-sdk-s3'

    //dynamoDB
    implementation 'io.github.boostchicken:spring-data-dynamodb:5.2.5'

    //Swagger Docs
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    //properties 프로세서
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation ('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'jakarta.persistence:jakarta.persistence-api'
    testImplementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //UUID
    implementation 'com.github.f4b6a3:uuid-creator:5.3.2'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    //open-feign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'com.github.okihouse:autocomplete:1.0.1'

    // okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

}

/** clean 태스크 실행시 QClass 삭제 */
clean {
    delete file('src/main/generated') // 인텔리제이 Annotation processor 생성물 생성위치
}


test {
    useJUnitPlatform()
}



